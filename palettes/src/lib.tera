use strum::{Display, EnumString, VariantArray};

#[derive(Clone, Copy, Debug, Display, EnumString, VariantArray)]
#[strum(serialize_all = "kebab-case")]
pub enum Palette {
  {% for name, palette in palettes -%}
    {{ name | pascal_case }},
  {% endfor %}
}

impl Palette {
    /// Collection of all palette variants
    pub const VARIANTS: &[Palette] = <Palette as VariantArray>::VARIANTS;

    /// Get the colors for the palette
    pub fn get(&self) -> &'static [[u8; 3]] {
        match self {
          {% for name, palette in palettes -%}
            Palette::{{ name | pascal_case }} => &[
              {% for hex in palette -%}
                {% set color = hex | hex_to_rgb %}
                [ {{ color.r }}u8, {{ color.g }}, {{ color.b }} ],
              {% endfor %}
            ],
          {% endfor %}
        }
    }
}
