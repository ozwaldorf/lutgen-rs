use strum::\{Display, EnumString, VariantArray};

#[derive(Clone, Copy, Debug, Display, EnumString, VariantArray)]
#[strum(serialize_all = "kebab-case")]
pub enum Palette \{
  {{ for item in palettes }}
    { item.name },
  {{ endfor }}
}

impl Palette \{
    /// Collection of all palette variants
    pub const VARIANTS: &'static [Palette] = <Palette as VariantArray>::VARIANTS;

    /// Get the colors for the palette
    pub fn get(&self) -> &'static [[u8; 3]] \{
        match self \{
          {{ for item in palettes }}
            Palette::{ item.name } => &[
              {{ for color in item.palette }}
                [ { color.r }u8, { color.g }, { color.b } ],
              {{ endfor }}
            ],
          {{ endfor }}
        }
    }
}

impl std::hash::Hash for Palette \{
    fn hash<H: std::hash::Hasher>(&self, state: &mut H) \{
        self.to_string().hash(state);
        self.get().hash(state);
    }
}
