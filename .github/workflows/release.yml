name: Release Builds
on: 
  push: 
    paths: 
      - '.github/workflows/release.yml'
      - 'crates/**/*'
      - 'Cargo.*'
  workflow_dispatch:

jobs:
  cleanup:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ github.token }}
    steps:
    - uses: actions/checkout@master
    - name: Delete old prerelease tags
      if: ${{ !startsWith(github.ref, 'refs/tags/') }}
      run: gh release delete nightly-${{ github.ref_name }} --cleanup-tag || true

  build:
    needs: cleanup
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
        - os: macos-latest
          TARGET: aarch64-apple-darwin
        - os: ubuntu-latest
          TARGET: aarch64-unknown-linux-gnu
        - os: ubuntu-latest
          TARGET: armv7-unknown-linux-gnueabihf
        - os: ubuntu-latest
          TARGET: x86_64-unknown-linux-gnu
        - os: windows-latest
          TARGET: x86_64-pc-windows-msvc
          EXTENSION: .exe

    steps:
    - name: Building ${{ matrix.TARGET }}
      run: echo "${{ matrix.TARGET }}"
    - uses: actions/checkout@master

    - name: Install build dependencies - Rustup
      run: |
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- --default-toolchain nightly --profile default --target ${{ matrix.TARGET }} -y
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH

    - name: Rust Cache
      uses: Swatinem/rust-cache@v2
      with:
        key: "${{ matrix.TARGET }}"
        cache-all-crates: "true"

    - name: Install rust tools
      run: |
        cargo install cargo-binstall
        cargo binstall cross --force

    - name: Build
      id: versions
      run: |
        cross build --release --target=${{ matrix.TARGET }} --bin lutgen
        cross build --release --target=${{ matrix.TARGET }} --bin lutgen-studio
        cp target/${{ matrix.TARGET }}/release/lutgen${{ matrix.EXTENSION }} lutgen-cli-${{ matrix.TARGET }}${{ matrix.EXTENSION }}
        cp target/${{ matrix.TARGET }}/release/lutgen-studio${{ matrix.EXTENSION }} lutgen-studio-${{ matrix.TARGET }}${{ matrix.EXTENSION }}
        echo "lutgen=$(cargo read-manifest --manifest-path crates/cli/Cargo.toml | jq .version -r)" >> $GITHUB_OUTPUT
        echo "lutgen_studio=$(cargo read-manifest --manifest-path crates/studio/Cargo.toml | jq .version -r)" >> $GITHUB_OUTPUT

    - uses: actions/upload-artifact@v4
      with:
        name: lutgen-cli-${{ matrix.TARGET }}${{ matrix.EXTENSION }}
        path: lutgen-cli-${{ matrix.TARGET }}${{ matrix.EXTENSION }}

    - uses: actions/upload-artifact@v4
      with:
        name: lutgen-studio-${{ matrix.TARGET }}${{ matrix.EXTENSION }}
        path: lutgen-studio-${{ matrix.TARGET }}${{ matrix.EXTENSION }}

    - uses: svenstaro/upload-release-action@v2
      name: Upload lutgen to release
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: lutgen-cli-${{ matrix.TARGET }}${{ matrix.EXTENSION }}
        asset_name: lutgen-cli-v${{ steps.versions.outputs.lutgen }}-${{ matrix.TARGET }}${{ matrix.EXTENSION }}
        tag: ${{!startsWith(github.ref, 'refs/tags/') && 'nightly-' || ''}}${{ github.ref }}
        prerelease: ${{ !startsWith(github.ref, 'refs/tags/') }}
        overwrite: true

    - uses: svenstaro/upload-release-action@v2
      name: Upload lutgen-studio to release
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: lutgen-studio-${{ matrix.TARGET }}${{ matrix.EXTENSION }}
        asset_name: lutgen-studio-v${{ steps.versions.outputs.lutgen_studio }}-${{ matrix.TARGET }}${{ matrix.EXTENSION }}
        tag: ${{!startsWith(github.ref, 'refs/tags/') && 'nightly-' || ''}}${{ github.ref }}
        prerelease: ${{ !startsWith(github.ref, 'refs/tags/') }}
        overwrite: true
